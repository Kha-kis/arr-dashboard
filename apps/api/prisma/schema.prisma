generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum ServiceType {
  SONARR
  RADARR
  PROWLARR
}

model User {
  id                  String                @id @default(cuid())
  username            String                @unique
  hashedPassword      String?               // Optional: users can authenticate via OIDC or passkeys
  mustChangePassword  Boolean               @default(false)
  failedLoginAttempts Int                   @default(0)
  lockedUntil         DateTime?
  encryptedTmdbApiKey String?
  tmdbEncryptionIv    String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  sessions            Session[]
  oidcAccounts        OIDCAccount[]
  webauthnCredentials WebAuthnCredential[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model ServiceTag {
  id        String            @id @default(cuid())
  name      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  instances ServiceInstanceTag[]
}

model ServiceInstance {
  id              String              @id @default(cuid())
  service         ServiceType
  label           String
  baseUrl         String
  encryptedApiKey String
  encryptionIv    String
  isDefault       Boolean             @default(false)
  enabled         Boolean             @default(true)
  defaultQualityProfileId Int?
  defaultLanguageProfileId Int?
  defaultRootFolderPath String?
  defaultSeasonFolder Boolean?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  tags            ServiceInstanceTag[]
  arrSyncSettings ArrSyncSettings?
  trashCFGroupTracking TrashCFGroupTracking[] @relation("TrashCFGroupTracking")
  trashQualityProfileTracking TrashQualityProfileTracking[] @relation("TrashQualityProfileTracking")

  @@index([service])
}

model ServiceInstanceTag {
  instanceId String
  tagId      String
  assignedAt DateTime @default(now())

  instance ServiceInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  tag      ServiceTag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([instanceId, tagId])
}

// OIDC Provider Configuration (stored in database, managed via UI)
model OIDCProvider {
  id                      String   @id @default(cuid())
  type                    String   // "authelia", "authentik", "generic"
  displayName             String   // Display name shown on login button
  clientId                String
  encryptedClientSecret   String   // AES-256-GCM encrypted
  clientSecretIv          String   // Initialization vector for encryption
  issuer                  String   // OIDC issuer URL for discovery
  redirectUri             String   // Callback URL
  scopes                  String   @default("openid,email,profile") // Comma-separated
  enabled                 Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@unique([type])
  @@map("oidc_providers")
}

// OIDC Account for external authentication providers (Authelia, Authentik, etc.)
model OIDCAccount {
  id              String   @id @default(cuid())
  userId          String
  provider        String   // e.g., "authelia", "authentik", "generic"
  providerUserId  String   // The user ID from the OIDC provider
  providerEmail   String?  // Email from the OIDC provider
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@index([userId])
  @@map("oidc_accounts")
}

// WebAuthn credentials for passkey authentication
model WebAuthnCredential {
  id                String   @id // Base64url encoded credential ID
  userId            String
  publicKey         String   // Base64url encoded public key
  counter           Int      @default(0) // Signature counter for security
  transports        String?  // JSON array of allowed transports (usb, nfc, ble, internal)
  backedUp          Boolean  @default(false) // Whether credential is backed up to cloud
  friendlyName      String?  // User-provided name (e.g., "iPhone", "YubiKey")
  createdAt         DateTime @default(now())
  lastUsedAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("webauthn_credentials")
}

enum BackupIntervalType {
  DISABLED
  HOURLY
  DAILY
  WEEKLY
}

// Backup settings (singleton table, only one row)
model BackupSettings {
  id                Int                 @id @default(1)
  enabled           Boolean             @default(false)
  intervalType      BackupIntervalType  @default(DISABLED)
  intervalValue     Int                 @default(24) // Hours for HOURLY, days for DAILY (1-7), 1 for WEEKLY
  retentionCount    Int                 @default(7)  // Number of scheduled backups to keep
  lastRunAt         DateTime?
  nextRunAt         DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("backup_settings")
}

// ARR Custom Formats & TRaSH Sync Settings
model ArrSyncSettings {
  id                String   @id @default(cuid())
  serviceInstanceId String   @unique
  enabled           Boolean  @default(true)
  trashRef          String   @default("stable") // git tag/branch/commit of TRaSH guides
  presets           String   @default("[]")     // JSON array of preset names (e.g. ["anime","x265","hdr10plus"])
  overridesJson     String   @default("{}")     // JSON for scores/terms/profile overrides
  lastSyncAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  serviceInstance ServiceInstance @relation(fields: [serviceInstanceId], references: [id], onDelete: Cascade)

  @@map("arr_sync_settings")
}

// Track custom formats imported from TRaSH Guides
model TrashCustomFormatTracking {
  id                String   @id @default(cuid())
  serviceInstanceId String
  customFormatId    Int      // The ID from Sonarr/Radarr
  customFormatName  String   // Name of the custom format (for display)
  trashId           String   // The TRaSH ID (from TRaSH Guides)
  service           ServiceType
  syncExcluded      Boolean  @default(false) // If true, skip this format during auto-sync
  lastSyncedAt      DateTime @default(now())
  lastSyncedHash    String?  // Hash of the format content to detect changes
  gitRef            String   @default("master") // Which git ref was used

  // Import source tracking
  importSource      TrashImportSource @default(INDIVIDUAL) // How this format was imported
  sourceReference   String?  // Optional: group filename or profile filename if imported from group/profile

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([serviceInstanceId, customFormatId])
  @@index([serviceInstanceId])
  @@index([trashId])
  @@map("trash_custom_format_tracking")
}

enum TrashSyncIntervalType {
  DISABLED
  HOURLY
  DAILY
  WEEKLY
}

enum TrashSyncStatus {
  SUCCESS
  FAILED
  PARTIAL
}

enum TrashImportSource {
  INDIVIDUAL  // Imported individually from TRaSH browser
  CF_GROUP    // Imported as part of a CF group
  QUALITY_PROFILE // Imported/applied via quality profile
}

// TRaSH Guides automatic sync settings per instance
model TrashInstanceSyncSettings {
  id                String                  @id @default(cuid())
  serviceInstanceId String                  @unique
  enabled           Boolean                 @default(false)
  intervalType      TrashSyncIntervalType   @default(DISABLED)
  intervalValue     Int                     @default(24) // Hours for HOURLY, days for DAILY (1-7), 1 for WEEKLY

  // What to sync
  syncFormats       Boolean                 @default(true)  // Sync individual custom formats
  syncCFGroups      Boolean                 @default(true)  // Sync CF groups
  syncQualityProfiles Boolean               @default(true)  // Sync quality profiles

  // Last run info
  lastRunAt         DateTime?
  lastRunStatus     TrashSyncStatus?
  lastErrorMessage  String?

  // Last run statistics
  formatsSynced     Int                     @default(0)
  formatsFailed     Int                     @default(0)
  cfGroupsSynced    Int                     @default(0)
  qualityProfilesSynced Int                 @default(0)

  nextRunAt         DateTime?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  @@map("trash_instance_sync_settings")
}

// Track CF Groups imported from TRaSH Guides
model TrashCFGroupTracking {
  id                String      @id @default(cuid())
  serviceInstanceId String
  groupFileName     String      // The filename of the CF group in TRaSH repo
  groupName         String      // Display name of the group
  qualityProfileName String?    // The quality profile that auto-included this CF-Group
  service           ServiceType
  importedCount     Int         @default(0) // Number of formats imported from this group
  lastSyncedAt      DateTime    @default(now())
  gitRef            String      @default("master") // Which git ref was used
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  serviceInstance ServiceInstance @relation("TrashCFGroupTracking", fields: [serviceInstanceId], references: [id], onDelete: Cascade)

  @@unique([serviceInstanceId, groupFileName])
  @@index([serviceInstanceId])
  @@map("trash_cf_group_tracking")
}

// Track Quality Profiles applied from TRaSH Guides
model TrashQualityProfileTracking {
  id                String      @id @default(cuid())
  serviceInstanceId String
  profileFileName   String      // The filename of the quality profile in TRaSH repo
  profileName       String      // Display name of the profile
  qualityProfileId  Int?        // The ID from Sonarr/Radarr (if it was created, not updated)
  service           ServiceType
  lastAppliedAt     DateTime    @default(now())
  gitRef            String      @default("master") // Which git ref was used
  customizationsJson String     @default("{}") // JSON: { [trashId]: { excluded?: boolean, scoreOverride?: number, notes?: string } }
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  serviceInstance ServiceInstance @relation("TrashQualityProfileTracking", fields: [serviceInstanceId], references: [id], onDelete: Cascade)

  @@unique([serviceInstanceId, profileFileName])
  @@index([serviceInstanceId])
  @@map("trash_quality_profile_tracking")
}
