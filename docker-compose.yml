version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: arr-dashboard-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      API_HOST: 0.0.0.0
      API_PORT: 3001
      API_CORS_ORIGIN: ${APP_URL:-http://localhost:3000}
      API_RATE_LIMIT_MAX: ${API_RATE_LIMIT_MAX:-200}
      API_RATE_LIMIT_WINDOW: ${API_RATE_LIMIT_WINDOW:-1 minute}
      DATABASE_URL: file:/app/data/prod.db
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:?ENCRYPTION_KEY is required}
      SESSION_COOKIE_SECRET: ${SESSION_COOKIE_SECRET:?SESSION_COOKIE_SECRET is required}
      SESSION_COOKIE_NAME: ${SESSION_COOKIE_NAME:-arr_session}
      SESSION_TTL_HOURS: ${SESSION_TTL_HOURS:-24}
      APP_URL: ${APP_URL:-http://localhost:3000}
      TMDB_API_KEY: ${TMDB_API_KEY:-}
    volumes:
      - api-data:/app/data
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - arr-dashboard

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: arr-dashboard-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:3001}
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - arr-dashboard

volumes:
  api-data:
    driver: local

networks:
  arr-dashboard:
    driver: bridge
